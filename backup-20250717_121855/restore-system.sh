#!/bin/bash

# Cross-Platform System Restore Script
# Generated by cross-platform backup solution

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'

BLUE='\033[0;34m'

NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"

}


log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"

}


log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Platform detection
detect_platform() {

    # Check for WSL first (multiple detection methods)

    if [[ -n "${WSL_DISTRO_NAME:-}" ]] || [[ -n "${WSL_INTEROP:-}" ]]; then
        echo "wsl"
    elif [[ -f /proc/version ]] && grep -qi "microsoft\|wsl" /proc/version 2>/dev/null; then
        echo "wsl"
    elif [[ -f /proc/sys/kernel/osrelease ]] && grep -qi "microsoft\|wsl" /proc/sys/kernel/osrelease 2>/dev/null; then

        echo "wsl"
    # Check for macOS
    elif [[ $(uname) == "Darwin" ]]; then
        echo "mac"
    # Check for Arch Linux
    elif [[ -f /etc/arch-release ]]; then
        echo "arch"
    # Fallback: check if it's Ubuntu/Debian (likely WSL if other methods failed)
    elif [[ -f /etc/os-release ]] && grep -qi "ubuntu\|debian" /etc/os-release 2>/dev/null && command -v apt >/dev/null 2>&1; then
        echo "wsl"
    else

        echo "unknown"
    fi
}

# Package name translation map (only for packages with different names)
declare -A PACKAGE_MAP=(
    # Web browsers
    ["google-chrome-stable"]="google-chrome:chromium:google-chrome"
    ["chromium-browser"]="chromium:chromium:chromium"
    
    # Development tools
    ["nodejs"]="nodejs:node:nodejs"
    ["python3"]="python3:python@3.11:python"

    ["python3-pip"]="python3-pip:python@3.11:python-pip"
    
    # Text editors

    ["code"]="code:visual-studio-code:code"
    ["sublime-text"]="sublime-text:sublime-text:sublime-text-4"
)

# Get package name for current platform

get_package_name() {
    local original_name=$1
    local platform=$2
    
    if [[ -n "${PACKAGE_MAP[$original_name]:-}" ]]; then
        local alternatives="${PACKAGE_MAP[$original_name]}"
        case $platform in
            "wsl") echo "$alternatives" | cut -d':' -f1 ;;
            "mac") echo "$alternatives" | cut -d':' -f2 ;;

            "arch") echo "$alternatives" | cut -d':' -f3 ;;
        esac
    else

        echo "$original_name"
    fi
}

# Update package managers
update_package_managers() {
    local platform=$1
    
    log_info "Updating package managers..."

    
    case $platform in

        "wsl")
            sudo apt update && sudo apt upgrade -y
            ;;
        "mac")
            if command -v brew >/dev/null 2>&1; then
                brew update && brew upgrade
            else
                log_warning "Homebrew not installed. Installing..."
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            fi

            ;;
        "arch")
            sudo pacman -Syu --noconfirm
            ;;
    esac
}

# Install packages for WSL

install_wsl_packages() {

    local failed_packages=()
    
    if [[ -f packages.txt.apt ]]; then
        log_info "Installing APT packages..."
        while IFS= read -r package; do
            [[ -z "$package" ]] && continue

            translated_name=$(get_package_name "$package" "wsl")
            log_info "Installing: $translated_name"
            if ! sudo apt install -y "$translated_name" 2>/dev/null; then
                log_warning "Failed to install: $translated_name"

                failed_packages+=("$package")
            fi

        done < packages.txt.apt
    fi
    
    if [[ -f packages.txt.snap ]]; then
        log_info "Installing Snap packages..."
        while IFS= read -r package; do
            [[ -z "$package" ]] && continue
            if ! sudo snap install "$package" 2>/dev/null; then
                log_warning "Failed to install snap: $package"

                failed_packages+=("$package")
            fi

        done < packages.txt.snap
    fi
    
    return 0
}


# Install packages for macOS
install_mac_packages() {
    local failed_packages=()

    
    if [[ -f packages.txt.brew ]]; then
        log_info "Installing Homebrew formulae..."
        while IFS= read -r package; do
            [[ -z "$package" ]] && continue
            translated_name=$(get_package_name "$package" "mac")

            log_info "Installing: $translated_name"
            if ! brew install "$translated_name" 2>/dev/null; then

                log_warning "Failed to install: $translated_name"
                failed_packages+=("$package")
            fi
        done < packages.txt.brew
    fi

    
    if [[ -f packages.txt.cask ]]; then
        log_info "Installing Homebrew casks..."

        while IFS= read -r package; do
            [[ -z "$package" ]] && continue
            log_info "Installing cask: $package"
            if ! brew install --cask "$package" 2>/dev/null; then
                log_warning "Failed to install cask: $package"

                failed_packages+=("$package")
            fi

        done < packages.txt.cask
    fi
    
    if [[ -f packages.txt.mas ]]; then
        log_info "Installing Mac App Store apps..."
        if command -v mas >/dev/null 2>&1; then
            while IFS= read -r line; do
                [[ -z "$line" ]] && continue
                app_id=$(echo "$line" | awk '{print $1}')
                if ! mas install "$app_id" 2>/dev/null; then
                    log_warning "Failed to install MAS app: $app_id"
                    failed_packages+=("$app_id")

                fi
            done < packages.txt.mas
        else
            log_info "Installing mas (Mac App Store CLI)..."
            brew install mas
        fi
    fi
    
    return 0
}

# Install packages for Arch
install_arch_packages() {
    local failed_packages=()
    
    if [[ -f packages.txt.pacman ]]; then

        log_info "Installing Pacman packages..."

        while IFS= read -r package; do
            [[ -z "$package" ]] && continue
            translated_name=$(get_package_name "$package" "arch")
            log_info "Installing: $translated_name"
            if ! sudo pacman -S --noconfirm "$translated_name" 2>/dev/null; then
                log_warning "Failed to install: $translated_name"

                failed_packages+=("$package")
            fi

        done < packages.txt.pacman
    fi
    
    if [[ -f packages.txt.aur ]]; then
        log_info "Installing AUR packages..."
        if command -v yay >/dev/null 2>&1; then
            while IFS= read -r package; do
                [[ -z "$package" ]] && continue
                log_info "Installing AUR package: $package"
                if ! yay -S --noconfirm "$package" 2>/dev/null; then
                    log_warning "Failed to install AUR package: $package"
                    failed_packages+=("$package")
                fi
            done < packages.txt.aur
        else
            log_info "Installing yay (AUR helper)..."
            sudo pacman -S --noconfirm git base-devel
            git clone https://aur.archlinux.org/yay.git
            cd yay
            makepkg -si --noconfirm
            cd ..
            rm -rf yay
        fi
    fi
    
    return 0
}

# Main restore function
main() {
    log_info "Starting cross-platform system restore..."
    
    # Detect current platform
    CURRENT_PLATFORM=$(detect_platform)
    log_info "Detected platform: $CURRENT_PLATFORM"
    
    if [[ "$CURRENT_PLATFORM" == "unknown" ]]; then

        log_error "Unsupported platform detected!"
        exit 1
    fi
    
    # Show backup information
    if [[ -f platform-info.txt ]]; then
        log_info "Backup information:"
        cat platform-info.txt
        echo
    fi
    
    # Update package managers
    update_package_managers "$CURRENT_PLATFORM"
    
    # Install packages based on platform
    case $CURRENT_PLATFORM in
        "wsl")
            install_wsl_packages
            ;;
        "mac")

            install_mac_packages
            ;;
        "arch")
            install_arch_packages
            ;;
    esac
    
    log_success "System restore completed!"
    log_info "Note: Don't forget to restore your dotfiles from your dotfiles repository"

}


# Run main function

main "$@"

